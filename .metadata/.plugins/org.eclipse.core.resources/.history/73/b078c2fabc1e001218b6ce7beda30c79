package com.badlogic.qbob.prototypestest;

import java.util.Iterator;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.tiled.SimpleTileAtlas;
import com.badlogic.gdx.graphics.g2d.tiled.TileAtlas;
import com.badlogic.gdx.graphics.g2d.tiled.TileMapRenderer;
import com.badlogic.gdx.graphics.g2d.tiled.TiledLoader;
import com.badlogic.gdx.graphics.g2d.tiled.TiledMap;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;


public class Level
{

	static final int WIDTH  = 480;
	static final int HEIGHT = 320;	 

	private TileMapRenderer tileMapRenderer;
	private TiledMap map;
	private TileAtlas atlas;
	private int[][] tilesModified;
	private SpriteBatch spriteBatch;
	private Animation[][] tilesAnimation;
	private int startX,startY;
	private player perso;
	private GestionaireItems items;

	public Level(String _urlMap,String _urlAssets,player _perso,GestionaireItems _items){
		items = _items;
		perso = _perso;


		//perso.Get_BodyDef().position.x = startX;
		//perso.Get_BodyDef().position.y = startY;
		spriteBatch = new SpriteBatch();

		map = TiledLoader.createMap(Gdx.files.internal(_urlMap));
		atlas = new SimpleTileAtlas(map, Gdx.files.internal(""));
		tileMapRenderer = new TileMapRenderer(map, atlas, 32, 32);
		
		tilesModified = new int[map.height][map.width];
		tilesAnimation = new Animation[map.height][map.width];
		
		for (int y = 0; y < map.height; y++) {
			for (int x = 0; x < map.width; x++) { 
				tilesAnimation[y][x] = null;
				tilesModified[y][x] =20;//TODO CHARGER LE NIVEAU	
			}
			makebody();
		}
	}


	private void makebody(){



		BodyDef bodyDef = new BodyDef();

		bodyDef.type = BodyDef.BodyType.StaticBody;





		for (int y = 0; y < map.height; y++) {
			for (int x = 0; x < map.width; x++) { 
				int tileid = map.layers.get(0).tiles[y][x];
				String testBlock = map.getTileProperty(tileid, "block");
			
				if(testBlock != null)
				{
					if(testBlock.equals("1"))
					{

						bodyDef.position.set( (x * map.tileWidth)* Utility.PIXELS_PER_METER+16,(( map.tileHeight * map.height) - y * map.tileHeight)*Utility.PIXELS_PER_METER-16);
						PolygonShape groundBox  = new PolygonShape();
						groundBox.setAsBox(16 * Utility.PIXELS_PER_METER, 16 * Utility.PIXELS_PER_METER);

						Body body	= Utility.world.createBody(bodyDef);
						FixtureDef jumperFixtureDef = new FixtureDef();
						jumperFixtureDef.shape = groundBox;
						jumperFixtureDef.density = 0.0f;
						jumperFixtureDef.friction = 0.5f;
						//body.createFixture(groundBox, 0.0f);
						body.createFixture(jumperFixtureDef);
						body.setAwake(true);
						body.setSleepingAllowed(true);

			
					}
				
				}
				String testStart = map.getTileProperty(tileid, "start");
				if(testStart != null)
				{
					if(testStart.equals("1"))
					{
					
						items.add(new Item(x,y,Item.START_OF_LEVEL,this));
						perso.Get_Body().setType(BodyType.StaticBody);
						perso.Get_Body().setTransform(x*32+16, map.height -y *32 -16, 0);
						perso.Get_Body().setType(BodyType.DynamicBody);
						
						
					}
				}
				
				
				String testEnd = map.getTileProperty(tileid, "end");
				if(testEnd != null)
				{
					if(testEnd.equals("1"))
					{
						items.add(new Item(x,y,Item.END_OF_LEVEL,this));
					}
				}
				String testRuban = map.getTileProperty(tileid, "ruban");
				if(testRuban != null)
				{
					if(testRuban.equals("1"))
					{
						items.add(new Item(x,y,Item.RUBAN,this));
					}
				}
				/*
				if (map.getTileProperty(tileid, "end") == "1")
				{
					items.add(new Item(x,y,Item.END_OF_LEVEL));
				}
				if (map.getTileProperty(tileid, "ruban") == "1")
				{
					items.add(new Item(x,y,Item.RUBAN));
				}
				String testEnd = map.getTileProperty(tileid, "end");
				String testRuban = map.getTileProperty(tileid, "ruban");
				*/
			}
		}
	}



	public void unChargeAnimation(int _x, int _y)
	{
		tilesAnimation[_y][_x] =  null;
	}
	public void chargeAnimation(int _x,int _y,Animation _anim)
	{
		
		tilesAnimation[_y][_x] = _anim;
	}
	public void changeTile(int _x,int _y,int _tile)
	{


		tilesModified[_y][_x] = _tile;


	}
	public void draw(OrthographicCamera cam)
	{

		//render(x, y, cam.viewportWidth, cam.viewportHeight);



		for (int y = 0; y < map.height; y++) {
			for (int x = 0; x < map.width; x++) { 
				spriteBatch.begin();
				//((x)- cam.position.x) +WIDTH/2 -32/2,(y- cam.position.y) +HEIGHT/2)-32/2)

				//spriteBatch.draw( atlas.getRegion(tilesModified[y][x]),(x *32 )- cam.position.x +WIDTH/2 ,((y*32- cam.position.y) +HEIGHT/2));
				if(tilesAnimation[y][x] != null)
				{
					spriteBatch.draw(tilesAnimation[y][x].getImageByTime(),(x *32 )- cam.position.x +WIDTH/2 ,((y*32- cam.position.y)+HEIGHT/2));
					
					
				}
				//spriteBatch.draw( atlas.getRegion(tilesModified[y][x]),x*32  ,2);
				spriteBatch.end();
			}
		}
	}
	
	public int Get_Height()
	{
		return map.height*map.tileHeight;	
	}
	public TileMapRenderer Get_tileMapRenderer()
	{
		return tileMapRenderer;	
	}
	public TiledMap Get_TiledMap()
	{
		return map;	
	}
	public int getStartX()
	{
		return startX;
	}
	public int getStartY()
	{
		return startY;
	}


	public void unChangeTile() {
		for (int y = 0; y < map.height; y++) {
			for (int x = 0; x < map.width; x++) { 

				tilesModified[y][x] = 20;	
			}
		}

	}
	public void onDestroy() {
		unChangeTile();
		items.delAll();

		Iterator<Body> allMyBodies = Utility.world.getBodies();
		while(allMyBodies.hasNext())
		{
			Body it = allMyBodies.next();
			
			if(it != perso.Get_Body())
			{
				Utility.world.destroyBody(it);
			}
		}

	}

}