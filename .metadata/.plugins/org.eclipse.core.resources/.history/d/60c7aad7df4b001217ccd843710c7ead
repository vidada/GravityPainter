package com.badlogic.qbob.prototypestest;

import java.util.HashMap;
import java.util.Map;
//class qui gere une case de gravitée
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.tiled.TiledMap;
import com.badlogic.gdx.math.Vector2;

public class GestionaireGravity {


	static final int UP = 1;
	static final int DOWN = 2;
	static final int LEFT = 3;
	static final int RIGHT = 4;
	private static Animation anim;
	

	private int taillePinceau = 10;

	private SpriteBatch spriteBatch;

	private TiledMap map;
	private player personnage;

	private Map<Integer, Gravity> gravitys;
	private int idGravity;
	public GestionaireGravity(player _perso)
	{
		gravitys = new HashMap<Integer, Gravity>();
	personnage = _perso;
		spriteBatch = new SpriteBatch();
		anim = new Animation("gravitee.png",32,32,200);
	}

public void addMap(Level _level)
{
	map = _level.Get_TiledMap();
}
	public Gravity get(int _id) 
	{

		return gravitys.get(_id);
	}

	public void add(Gravity _gravity){
	
		boolean exist = false;
		for (int key : gravitys.keySet()) 
		{

			if(_gravity.getX()== gravitys.get(key).getX() &&	_gravity.getY() == gravitys.get(key).getY())
			{
				exist = true;
				gravitys.get(key).setTimer();
			}
		}

			if(exist == false)
			{
				gravitys.put(idGravity, _gravity);
				int x=gravitys.get(idGravity).getX();
				int y=gravitys.get(idGravity).getY();
				
				idGravity++;

			/*
					

				*/
			}

		
	}
	
	//public HashMap<Integer, Gravity> isInContact(float _x,float _y,int _hitboxLength)
//	{
//	HashMap<Integer, Gravity> listColisionGravity = null;
//	int id = 0;
//	listColisionGravity = new HashMap<Integer, Gravity>();
//		for (int key : gravitys.keySet()) 
//		{
//			if(this.get(key).isInContact(_x,_y,_hitboxLength))
//			{
//		 
//		 listColisionGravity.put(id, this.get(key));
//		 id++;
//			}
//			
//		}
	
//		return listColisionGravity;
		
		
	
	public void draw(OrthographicCamera cam)
	{


		for (int key : gravitys.keySet()) 
		{
			int y=get(key).getY();
			int x=get(key).getX();
			
			String testBlock = map.getTileProperty(map.layers.get(0).tiles[map.height-y-1][x], "block");
			
			if(testBlock != null)
			{
				if(testBlock.equals("1"))
				{
					if (get(key) != null)
					{
						if(get(key).getTimerElapsed())
						{
							//del(key);	
						}else
						{
							//System.out.println("Block at X :"+x+"y:"+y);
							spriteBatch.begin();
							spriteBatch.draw(anim.getImageByTime(),(x *32 )- cam.position.x +Utility.WIDTH/2 ,((y*32- cam.position.y)+Utility.HEIGHT/2));
							spriteBatch.end();
							
						}
					}
				}
			}
		}
	}

	public	boolean del(int _id)
	{
		gravitys.remove(_id);
		return true;
	}
	public boolean delAll() 
	{
		

		gravitys.clear();
		idGravity = 0;
		return true;
	}

	public void render()
	{
		for (int mapKey : gravitys.keySet()) 
		{
		Vector2 boxPosition = gravitys.get(mapKey).getBody().getWorldCenter();
		Vector2 playerPosition = personnage.Get_Body().getWorldCenter();
		Vector2 boxDistance = new Vector2(0,0);//distance entre la block et le joueur
		boxDistance.add(playerPosition);
		boxDistance.sub(boxPosition);
		float finalDistance = boxDistance.len();
		float rayonBox = gravitys.get(mapKey).getGroundBox().getRadius();
		float vecSum = 0;
		if(finalDistance <= rayonBox*3)
		{
		//gravitys.get(mapKey).getBody().
			
		vecSum = Math.abs(boxDistance.x)+Math.abs(boxDistance.y);
			boxDistance.mul((1/vecSum)*rayonBox/finalDistance);
			
			personnage.Get_Body().applyForce(boxDistance.set(-boxDistance.y, -boxDistance.x), playerPosition);
		}}
	}	
}





